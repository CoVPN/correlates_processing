
R version 4.0.4 (2021-02-15) -- "Lost Library Book"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Sys.setenv(TRIAL = "janssen_pooled_mock")
> # Sys.setenv(TRIAL = "prevent19")
> renv::activate(here::here(".."))
* Project '~/forked_correlates_reporting/correlates_processing' loaded. [renv 0.13.2]
Warning message:
Project requested R version '4.1.1' but '4.0.4' is currently being used 
> # There is a bug on Windows that prevents renv from working properly. The following code provides a workaround:
> if (.Platform$OS.type == "windows") .libPaths(c(paste0(Sys.getenv ("R_HOME"), "/library"), .libPaths()))
> source(here::here("..", "_common.R"))

Attaching package: ‘dplyr’

The following object is masked from ‘package:kyotil’:

    last

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> #-----------------------------------------------
> # renv::activate(here::here())
> # # There is a bug on Windows that prevents renv from working properly. The following code provides a workaround:
> # if (.Platform$OS.type == "windows") .libPaths(c(paste0(Sys.getenv ("R_HOME"), "/library"), .libPaths()))
> # source(here::here("_common.R"))
> 
> # load required libraries and functions
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ tibble  3.1.1     ✔ purrr   0.3.4
✔ tidyr   1.1.3     ✔ stringr 1.4.0
✔ readr   1.4.0     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
✖ dplyr::last()   masks kyotil::last()
> library(here)
here() starts at /home/bborate/forked_correlates_reporting/correlates_processing/riskscore_baseline
> library(methods)
> library(SuperLearner)
Loading required package: nnls
Loading required package: gam
Loading required package: splines
Loading required package: foreach

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loaded gam 1.20

Super Learner
Version: 2.0-28
Package created on 2021-05-04

> library(e1071)

Attaching package: ‘e1071’

The following object is masked from ‘package:kyotil’:

    interpolate

> library(glmnet)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

Loaded glmnet 4.1-2
> library(kyotil)
> library(argparse)
> library(vimp)
vimp version 2.2.1: Perform Inference on Algorithm-Agnostic Variable Importance
Package created on 2021-09-24
> library(nloptr)
> library(RhpcBLASctl)
> library(conflicted)
> conflicted::conflict_prefer("filter", "dplyr")
[conflicted] Will prefer dplyr::filter over any other package
> conflict_prefer("summarise", "dplyr")
[conflicted] Will prefer dplyr::summarise over any other package
> conflict_prefer("omp_set_num_threads", "RhpcBLASctl")
[conflicted] Will prefer RhpcBLASctl::omp_set_num_threads over any other package
> library(mice)
> library(tidymodels)
Registered S3 method overwritten by 'tune':
  method                   from   
  required_pkgs.model_spec parsnip
── Attaching packages ────────────────────────────────────── tidymodels 0.1.3 ──
✔ broom        0.7.9      ✔ rsample      0.1.0 
✔ dials        0.0.9      ✔ tune         0.1.6 
✔ infer        0.5.4      ✔ workflows    0.2.3 
✔ modeldata    0.1.1      ✔ workflowsets 0.1.0 
✔ parsnip      0.1.7      ✔ yardstick    0.0.8 
✔ recipes      0.1.16     
> library(Hmisc) # wtd.quantile, cut2
Loading required package: lattice
Loading required package: survival
Loading required package: Formula
> library(dplyr)
> library(recipes)
> 
> if(startsWith(tolower(study_name), "mock")) {
+   path_to_data <- here("..", "data_raw", data_raw_dir, data_in_file)
+ } else {
+   path_to_data <- data_in_file
+ }
> print(path_to_data)
[1] "/trials/covpn/p3004/analysis/mapping_immune_correlates/adata/COVID_Novavax_realdata_20220208.csv"
> if (!file.exists(path_to_data)) stop ("make dat proc: dataset not available ===========================================")
> 
> # Define code version to run
> # the demo version is simpler and runs faster!
> # the production version runs SL with a diverse set of learners
> run_prod <- !grepl("Mock", study_name)
> 
> # get utility files
> source(here("code", "sl_screens.R")) # set up the screen/algorithm combinations
* Project '~/forked_correlates_reporting/correlates_processing' loaded. [renv 0.13.2]
Warning message:
Project requested R version '4.1.1' but '4.0.4' is currently being used 
> source(here("code", "utils.R")) # get CV-AUC for all algs
* Project '~/forked_correlates_reporting/correlates_processing' loaded. [renv 0.13.2]
Warning message:
Project requested R version '4.1.1' but '4.0.4' is currently being used 
> 
> ############ SETUP INPUT #######################
> # Read in data file
> if(study_name %in% c("ENSEMBLE", "MockENSEMBLE")){
+   inputFile <- preprocess.for.risk.score(read.csv(path_to_data), study_name) %>%
+     rename(Ptid = Subjectid)
+ }else if(study_name == "MockCOVE"){
+   inputFile <- preprocess.for.risk.score(read.csv(path_to_data), study_name) %>%
+     rename(Ptid = X)
+ }else if(study_name == "COVE"){
+   inputFile <- preprocess.for.risk.score(read.csv(path_to_data), study_name)
+   print("Risk scores for Moderna real dataset were generated at Moderna's end using CoVPN Stats/SCHARP code. 
+         Are you sure you want to regenerate them?")
+ }else if(study_name == "PREVENT19"){
+   inputFile <- preprocess.for.risk.score(read.csv(path_to_data), study_name) %>%
+     rename(Ptid = Subjectid) 
+ }
> 
> # Save inputFile 
> if(!dir.exists(paste0("output/", Sys.getenv("TRIAL")))){
+   dir.create(paste0("output/", Sys.getenv("TRIAL")))
+ }
> save(inputFile, file = paste0("output/", Sys.getenv("TRIAL"), "/", attr(config, "config"), "_inputFile.RData"))
> 
> # Identify the risk demographic variable names that will be used to compute the risk score
> # Identify the endpoint variable
> if(study_name %in% c("COVE", "MockCOVE")){
+   endpoint <- "EventIndPrimaryD57"
+   risk_timepoint <- 57
+   studyName_for_report <- "COVE"
+   inputMod <- inputFile
+   if(study_name %in% c("COVE")){
+     risk_vars <- c(
+       "MinorityInd", "EthnicityHispanic", "EthnicityNotreported", "EthnicityUnknown", 
+       "Black", "Asian", "NatAmer", "PacIsl",  
+       "Multiracial", "Other", 
+       "Notreported", "Unknown",
+       "HighRiskInd", "Sex", "Age", "BMI"
+     )
+   }
+ 
+   if(study_name %in% c("MockCOVE")){ # as MinorityInd variable is absent in mock!
+     risk_vars <- c(
+       "EthnicityHispanic", "EthnicityNotreported", "EthnicityUnknown", 
+       "Black", "Asian", "NatAmer", "PacIsl",  
+       "Multiracial", "Other", 
+       "Notreported", "Unknown",
+       "HighRiskInd", "Sex", "Age", "BMI"
+     )
+   }
+   original_risk_vars <- risk_vars
+ }
> 
> 
> if(study_name %in% c("ENSEMBLE", "MockENSEMBLE")){
+   risk_vars <- c(
+     "EthnicityHispanic","EthnicityNotreported", "EthnicityUnknown",
+     "Black", "Asian", "NatAmer", "PacIsl", "Multiracial", "Notreported", "Unknown",
+     "URMforsubcohortsampling", "HighRiskInd", "HIVinfection", 
+     "Sex", "Age", "BMI",
+     "Country.X1", "Country.X2", "Country.X3", "Country.X4", "Country.X5", "Country.X6", "Country.X7", 
+     "Region.X1", "Region.X2", 
+     "CalDtEnrollIND.X1"
+   )
+   
+   # Store original original risk variables as well to check in check_if_SL_needs_be_run.R!
+   original_risk_vars <- c(
+     "EthnicityHispanic","EthnicityNotreported", "EthnicityUnknown",
+     "Black", "Asian", "NatAmer", "PacIsl", "Multiracial", "Notreported", "Unknown",
+     "URMforsubcohortsampling", "HighRiskInd", "HIVinfection", 
+     "Sex", "Age", "BMI",
+     "Country", "Region", "CalendarDateEnrollment"
+   )
+   
+   if(run_prod){
+     risk_vars <- append(risk_vars, c("CalDtEnrollIND.X2", "CalDtEnrollIND.X3"))
+   }
+   
+   endpoint <- "EventIndPrimaryIncludeNotMolecConfirmedD29"
+   risk_timepoint <- 29
+   studyName_for_report <- "ENSEMBLE"
+   
+   # Create binary indicator variables for Country and Region
+   inputMod <- inputFile %>%
+     drop_na(CalendarDateEnrollment, EventIndPrimaryIncludeNotMolecConfirmedD29) %>%
+     mutate(Sex.rand = sample(0:1, n(), replace = TRUE),
+            Sex = ifelse(Sex %in% c(2, 3), Sex.rand, Sex), # assign Sex randomly as 0 or 1 if Sex is 2 or 3.
+            Country = as.factor(Country),
+            Region = as.factor(Region),
+            CalDtEnrollIND = case_when(CalendarDateEnrollment < 28 ~ 0,
+                                       CalendarDateEnrollment >= 28 & CalendarDateEnrollment < 56 ~ 1,
+                                       CalendarDateEnrollment >= 56 & CalendarDateEnrollment < 84 ~ 2,
+                                       CalendarDateEnrollment >= 84 & CalendarDateEnrollment < 112 ~ 3,
+                                       CalendarDateEnrollment >= 112 & CalendarDateEnrollment < 140 ~ 4,
+                                       CalendarDateEnrollment >= 140 & CalendarDateEnrollment < 168 ~ 5),
+            CalDtEnrollIND = as.factor(CalDtEnrollIND)) %>%
+     select(-Sex.rand)
+   
+   rec <- recipe(~ Country + Region + CalDtEnrollIND, data = inputMod)
+   dummies <- rec %>%
+     step_dummy(Country, Region, CalDtEnrollIND) %>%
+     prep(training = inputMod)
+   inputMod <- inputMod %>% bind_cols(bake(dummies, new_data = NULL)) 
+   # %>%
+   #   select(-c(Country, Region, CalDtEnrollIND))
+   names(inputMod)<-gsub("\\_",".",names(inputMod))
+   
+   # # Create interaction variables between Region and CalDtEnrollIND
+   # rec <- recipe(EventIndPrimaryIncludeNotMolecConfirmedD29 ~., data = inputMod)
+   # int_mod_1 <- rec %>%
+   #   step_interact(terms = ~ starts_with("Region"):starts_with("CalDtEnrollIND"))
+   # int_mod_1 <- prep(int_mod_1, training = inputMod)
+   # inputMod <- bake(int_mod_1, inputMod)
+   # names(inputMod)<-gsub("\\_",".",names(inputMod))
+   # if(run_prod){
+   #   risk_vars <- append(risk_vars, c("Region.X1.x.CalDtEnrollIND.X1", "Region.X1.x.CalDtEnrollIND.X2",
+   #                                    "Region.X1.x.CalDtEnrollIND.X3",
+   #                                    "Region.X2.x.CalDtEnrollIND.X1", "Region.X2.x.CalDtEnrollIND.X2",
+   #                                    "Region.X2.x.CalDtEnrollIND.X3"))
+   # }
+ }
> 
> 
> 
> if(study_name %in% c("PREVENT19")){
+   risk_vars <- c(
+     "Age", "Sex", "Black", "Asian", "NatAmer", "PacIsl",  
+     "Multiracial", "Notreported", "Unknown",
+     "EthnicityHispanic", "EthnicityNotreported", "EthnicityUnknown",
+     "Height", "Weight", "BMI", "HighRiskInd"
+   )
+   original_risk_vars <- risk_vars
+   endpoint <- "EventIndPrimaryD35"
+   risk_timepoint <- 35
+   studyName_for_report <- "PREVENT19"
+   inputMod <- inputFile %>%
+     filter(Country == 0) # Analysis based off only US subjects 
+ }
> 
> # Check there are no NA values in Riskscorecohortflag!
> assertthat::assert_that(
+   all(!is.na(inputMod$Riskscorecohortflag)), msg = "NA values present in Riskscorecohortflag!"
+ )
[1] TRUE
> 
> source(here("code", "check_if_SL_needs_be_run.R"))
riskscore_baseline/output/prevent19/prevent19_inputFile_with_riskscore.RData does not exist. Superlearner needs to be run and new risk scores generated!
[1] "Asian dropped from risk score analysis as the number of cases in the variable = 1 or 0 subgroup is <= 3."
[1] "NatAmer dropped from risk score analysis as the number of cases in the variable = 1 or 0 subgroup is <= 3."
[1] "PacIsl dropped from risk score analysis as the number of cases in the variable = 1 or 0 subgroup is <= 3."
[1] "Multiracial dropped from risk score analysis as the number of cases in the variable = 1 or 0 subgroup is <= 3."
[1] "Notreported dropped from risk score analysis as the number of cases in the variable = 1 or 0 subgroup is <= 3."
[1] "Unknown dropped from risk score analysis as the number of cases in the variable = 1 or 0 subgroup is <= 3."
[1] "EthnicityNotreported dropped from risk score analysis as the number of cases in the variable = 1 or 0 subgroup is <= 3."
[1] "EthnicityUnknown dropped from risk score analysis as the number of cases in the variable = 1 or 0 subgroup is <= 3."
[1] "Make sure data is clean before conducting imputations!"
[1] "Imputing missing values in following variables:  Height, Weight, BMI"
[1] "Height"
[1] "Weight"
[1] "BMI"
Loading required namespace: xgboost
Loading required namespace: ranger
